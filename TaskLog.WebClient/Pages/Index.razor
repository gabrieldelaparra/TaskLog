@page "/"
@using System.Globalization
@inject WeatherForecastService ForecastService

<style>
    .sidenav {
        height: 100%;
        width: 160px;
        position: fixed;
        z-index: 0;
        top: 0;
        left: 0;
        overflow-x: hidden;
        padding-top: 20px;
    }

    .job-container {
        display: flex;
        justify-content: space-around;
        flex-direction: column;
        width: 160px;
    }
</style>

<div class="sidenav">
    <div class="job-container">
        @foreach (var job in Jobs)
        {
            <JobView Job="job"></JobView>
        }
    </div>
</div>

<TaskWeekView Tasks="Tasks" OnStatusUpdated="HandleStatusUpdated">
    <TaskDayView ShortDateString="@DateTime.Now.AddDays(-2).ToShortDateString()" />
    <TaskDayView ShortDateString="@DateTime.Now.AddDays(-1).ToShortDateString()" />
    <TaskDayView ShortDateString="@DateTime.Now.ToShortDateString()" />
    <TaskDayView ShortDateString="@DateTime.Now.AddDays(1).ToShortDateString()" />
    <TaskDayView ShortDateString="@DateTime.Now.AddDays(2).ToShortDateString()" />
</TaskWeekView>

<hr />
<p>Last updated task was: <strong>@lastUpdatedTask</strong></p>
<hr />

@code {
    int calendarWeek;
    List<JobTask> ProjectTasks { get; set; }
    List<ProjectJob> Jobs { get; set; }

    protected override void OnInitialized()
    {
        Jobs = WeatherForecastService.Jobs.ToList();

        var calendar = DateTimeFormatInfo.CurrentInfo.Calendar;
        calendarWeek = calendar.GetWeekOfYear(DateTime.Now, CalendarWeekRule.FirstDay, DayOfWeek.Monday);
        var tasks = new List<JobTask>();
        tasks.AddRange(ForecastService.GetJobTasks(DateTime.Now));
        tasks.AddRange(ForecastService.GetJobTasks(DateTime.Now.AddDays(-1)));
        tasks.AddRange(ForecastService.GetJobTasks(DateTime.Now.AddDays(+5)));
        tasks.AddRange(ForecastService.GetJobTasks(DateTime.Now.AddDays(+2)));
        ProjectTasks = tasks.ToList();
        Tasks = tasks.ToList();

        //WeatherForecastService.SaveJobs(WeatherForecastService.Jobs.ToArray());

    }

    List<JobTask> Tasks = new List<JobTask>();
    string lastUpdatedTask = "";

    //protected override void OnInitialized()
    //{
    //    Jobs.Add(new JobModel { Id = 1, Description = "Mow the lawn", Status = JobStatuses.Todo, LastUpdated = DateTime.Now });
    //    Jobs.Add(new JobModel { Id = 2, Description = "Go to the gym", Status = JobStatuses.Todo, LastUpdated = DateTime.Now });
    //    Jobs.Add(new JobModel { Id = 3, Description = "Call Ollie", Status = JobStatuses.Todo, LastUpdated = DateTime.Now });
    //    Jobs.Add(new JobModel { Id = 4, Description = "Fix bike tyre", Status = JobStatuses.Todo, LastUpdated = DateTime.Now });
    //    Jobs.Add(new JobModel { Id = 5, Description = "Finish blog post", Status = JobStatuses.Todo, LastUpdated = DateTime.Now });
    //}

    void HandleStatusUpdated(JobTask jobTask)
    {
        lastUpdatedTask = jobTask.ToString();
    }
}
