@page "/"
@using TaskLog.WebClient.Models
@using TaskLog.WebClient.Services
@inject WeatherForecastService ForecastService

<style>
    .sidenav {
        height: 100%;
        width: 160px;
        position: fixed;
        z-index: 0;
        top: 0;
        left: 0;
        overflow-x: hidden;
        padding-top: 20px;
    }

    .job-container {
        display: flex;
        justify-content: space-around;
        flex-direction: column;
        width: 160px;
    }

    .floatBtn {
        position: fixed;
        bottom: 100px;
        right: 100px;
        height: 50px;
        line-height: 50px;
        width: 50px;
        font-size: 16px;
        font-weight: bold;
        border-radius: 50%;
        background-color: DODGERBLUE;
        color: white;
        text-align: center;
    }
</style>

<div class="sidenav">
    <div class="job-container">
        @foreach (var job in Jobs)
        {
            <JobView Job="job"></JobView>
        }
    </div>
</div>

<TaskWeekView Tasks="Tasks" OnDateChanged="HandleDateChanged">
    <TaskDayView DayDate="@DateTime.Now.AddDays(-2).ToShortDateString()" />
    <TaskDayView DayDate="@DateTime.Now.AddDays(-1).ToShortDateString()" />
    <TaskDayView DayDate="@DateTime.Now.ToShortDateString()" />
    <TaskDayView DayDate="@DateTime.Now.AddDays(1).ToShortDateString()" />
    <TaskDayView DayDate="@DateTime.Now.AddDays(2).ToShortDateString()" />
</TaskWeekView>

<button class="floatBtn" type="button" @onclick="AddTask"><i class="oi oi-plus"></i></button>

@code {
    List<JobTask> Tasks { get; set; }
    List<ProjectJob> Jobs { get; set; }

    protected override void OnInitialized()
    {
        ForecastService.LoadJobs();
        ForecastService.LoadTasks();
        Jobs = ForecastService.Jobs.ToList();
        Tasks = ForecastService.Tasks.ToList();
    }

    void HandleDateChanged(JobTask jobTask)
    {
        ForecastService.SaveTasks(Tasks.ToArray());
    }

    void AddTask()
    {
        Tasks.Add(new JobTask() {
            ProjectJob = Jobs.OrderByDescending(x=>x.Id).FirstOrDefault(),
            Hours = 0.5,
            Date = DateTime.Today,
            TaskType = TaskType.Normal,
            Id = Guid.NewGuid(),
        });
        StateHasChanged();
    }
}
