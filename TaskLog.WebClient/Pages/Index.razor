@page "/"
@inject DataService DataService
@implements IDisposable

<div class="job-side-nav">
    <div class="job-container">
        @foreach (var job in Jobs)
        {
            <JobView Job="job"></JobView>
        }
    </div>
</div>

<button class="float-btn" type="button" style="top: 20px;
        right: 30px;
        height: 30px;
        width: 30px;
        line-height: 30pX; background-color: MEDIUMSEAGREEN;" @onclick="IncreaseDay">
    <i class="oi oi-chevron-right" />
</button>
<button class="float-btn" type="button" style="top: 20px;
        left: 165px;
        height: 30px;
        width: 30px;
        line-height: 30pX;
        background-color: MEDIUMSEAGREEN;" @onclick="DecreaseDay">
    <i class="oi oi-chevron-left" />
</button>

<div class="task-week-container">
    <TaskDayView DayDate="@getDay(-2)" />
    <TaskDayView DayDate="@getDay(-1)" />
    <TaskDayView DayDate="@getDay(0)" />
    <TaskDayView DayDate="@getDay(+1)" />
    <TaskDayView DayDate="@getDay(+2)" />
</div>

<button class="float-btn" type="button" @onclick="(()=>DataService.AddNewTask(CurrentDay))"><i class="oi oi-plus" /></button>

<RemoveTaskDropZone />

@code {
    List<JobTask> Tasks { get; set; }
    List<ProjectJob> Jobs { get; set; }

    public int CurrentDay { get; set; }
    private void IncreaseDay()
    {
        CurrentDay++;
        if (DateTime.Today.AddDays(CurrentDay).DayOfWeek.Equals(DayOfWeek.Saturday))
            CurrentDay++;
        if (DateTime.Today.AddDays(CurrentDay).DayOfWeek.Equals(DayOfWeek.Sunday))
            CurrentDay++;
        StateHasChanged();
    }

    private void DecreaseDay()
    {
        CurrentDay--;
        if(DateTime.Today.AddDays(CurrentDay).DayOfWeek.Equals(DayOfWeek.Sunday))
            CurrentDay--;
        if (DateTime.Today.AddDays(CurrentDay).DayOfWeek.Equals(DayOfWeek.Saturday))
            CurrentDay--;
        StateHasChanged();
    }

    DateTime getDay(int extraDays)
    {
        return DataService.AddBusinessDays(DateTime.Today, CurrentDay, extraDays);
    }

    protected override void OnInitialized()
    {
        //First jobs, then tasks:
        DataService.LoadJobs();
        DataService.LoadTasks();
        Jobs = DataService.Jobs.ToList();
        Tasks = DataService.Tasks.ToList();
        DataService.OnDataChanged += HandleDateChanged;
    }

    void HandleDateChanged()
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        DataService.OnDataChanged -= HandleDateChanged;
    }
}
