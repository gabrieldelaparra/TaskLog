<style>
    input {
        background-color: transparent;
        border: 0px solid;
    }

    .draggable {
        cursor: grab;
    }

        .draggable:active {
            cursor: grabbing;
        }

    .dragging {
        cursor: grabbing;
    }

    button:focus {
        outline: 0;
    }

    .al-cnt {
        align-items: center;
    }
</style>


<div class="border rounded m-2 px-1" style=" width: 16rem;
        background: @Task.TaskClass.DefaultColor;
">

    <!-- Drag, Clock/Hours, Badge -->
    <div class="d-inline-flex al-cnt">
        <!-- Drag -->
        <span class="oi oi-grid-three-up draggable float-left m-2" draggable="true" @ondragstart="@(() => HandleDragStart(Task))"></span>

        <!-- Clock/Hours -->
        <div class="input-group input-group-sm mt-1">
            <div class="input-group-prepend">
                <span class="input-group-text">
                    <i class="oi oi-clock"></i>
                </span>
            </div>
            <input type="number" class="form-control" @bind="Hours" placeholder="2">
        </div>

        <!-- Badge -->
        <div>
            <button type="button" class="badge badge-@BadgeStyle float-right mx-2 mt-1" style="border:0" @onclick="RollBadge">@Task.TaskType.ToString()</button>
        </div>

    </div>

    <!-- Task Element -->
    <div class="text-truncate">
        <small>
            @Task.TaskClass.ToString()
        </small>
    </div>
</div>

@code {
    [CascadingParameter] TaskWeekView TaskWeek { get; set; }
    [Parameter] public TaskInstance Task { get; set; }

    private string BadgeStyle
    {
        get
        {
            if (Task.TaskType == TaskType.Error)
                return "danger";
            if (Task.TaskType == TaskType.Normal)
                return "light";
            if (Task.TaskType == TaskType.Other)
                return "secondary";
            if (Task.TaskType == TaskType.Rework)
                return "warning";
            if (Task.TaskType == TaskType.Tools)
                return "info";
            return "light";
        }
    }

    public double Hours
    {
        get => Task.Hours;
        set {
            Task.Hours = value;
            OnHoursChanged.Invoke();
        }
    }

    [Parameter] public Action OnHoursChanged { get; set; }

    public void RollBadge()
    {
        var currentIndex = (int)Task.TaskType;
        Task.TaskType = (TaskType)(++currentIndex % 5);
    }

    private void HandleDragStart(TaskInstance selectedJob)
    {
        TaskWeek.Payload = selectedJob;
    }
}