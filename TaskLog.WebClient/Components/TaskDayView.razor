@inject DataService DataService
@inject TaskDragStateHandler TaskDragStateHandler
@implements IDisposable

<div class="task-day-container">
    <h3>@DayDate (@_dayTasks.Sum(x => x.Hours))</h3>

    <div class="dropzone day-dropzone @_dropClass"
         ondragover="event.preventDefault();"
         ondragstart="event.dataTransfer.setData('', event.target.id);"
         @ondrop="HandleDrop"
         @ondragenter="HandleDragEnter"
         @ondragleave="HandleDragLeave">

        @foreach (var jobTask in _dayTasks)
        {
            <TaskView JobTask="jobTask" OnHoursChanged="HandleTaskHoursChanged" />
        }

    </div>
</div>

@code {

    [Parameter] public string DayDate { get; set; }

    private readonly List<JobTask> _dayTasks = new List<JobTask>();
    private string _dropClass = "";

    //Called when the Parameter DayDate is set;
    protected override void OnParametersSet()
    {
        _dayTasks.Clear();
        _dayTasks.AddRange(DataService.Tasks.Where(x => x.Date.ToShortDateString() == DayDate));
    }

    public void HandleTaskHoursChanged()
    {
        StateHasChanged();
    }

    private void HandleDragEnter()
    {
        //If the task is already there, do nothing;
        if (DayDate == TaskDragStateHandler.TaskView.JobTask.Date.ToShortDateString())
            return;

        _dropClass = "can-drop";
    }

    private void HandleDragLeave()
    {
        _dropClass = "";
    }

    private void HandleDrop()
    {
        _dropClass = "";
        DataService.MoveToNewDay(TaskDragStateHandler.TaskView.JobTask, DayDate);
    }

    protected override void OnInitialized()
    {
        DataService.OnDataChanged += HandleDateChanged;
    }

    public void Dispose()
    {
        DataService.OnDataChanged -= HandleDateChanged;
    }

    void HandleDateChanged()
    {
        OnParametersSet();
        StateHasChanged();
    }
}
