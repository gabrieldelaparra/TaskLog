@inject TaskDragStateHandler TaskDragStateHandler
@inject DataService DataService

<div class="border rounded m-2 px-1" style=" width: 16rem; background: @JobTask.ProjectJob.DefaultColor;">

    <!-- Drag, Clock/Hours, Badge -->
    <div class="d-inline-flex al-cnt">

        <!-- Drag -->
        <span class="oi oi-grid-three-up draggable float-left m-2" draggable="true" @ondragstart="@HandleDragStart"></span>

        <!-- Clock/Hours -->
        <div class="input-group input-group-sm mt-1">
            <div class="input-group-prepend">
                <span class="input-group-text">
                    <i class="oi oi-clock"></i>
                </span>
            </div>
            <input type="number" class="form-control hours-input" @bind="Hours" placeholder="2" step="0.5" min="0">
        </div>

        <!-- Badge -->
        <LargeTaskTypeBadge TaskType="@JobTask.TaskType" OnChangeAction="BadgeChanged" />

    </div>

    <!-- Description -->
    <small>
        <p class="m-0">
            Notes:
            <button class="btn btn-sm" style="border-radius: 50%; font-size: 8px; outline: none;" @onclick="(()=>showNotes = !showNotes)">
                <i class="@(showNotes ? "oi oi-chevron-bottom" : "oi oi-chevron-top")"></i>
            </button>
        </p>
    </small>
    @if(showNotes){
        <div>
            <textarea rows="1" style="width: 100%"></textarea>
        </div>
    }

    <!-- Task Element -->
    <div class="text-truncate">
        <small>
            <strong>
                @JobTask.ProjectJob.ToString()
            </strong>
        </small>
    </div>
</div>

@code {

    //View Model
    [Parameter] public JobTask JobTask { get; set; }
    [Parameter] public Action OnHoursChanged { get; set; }

    private bool showNotes = false;

    public double Hours
    {
        get => JobTask.Hours;
        set
        {
            JobTask.Hours = value;
            OnHoursChanged?.Invoke(); // To update day count
            DataService.SaveTasks(); // Save Data
        }
    }

    public void UpdateJob()
    {
        StateHasChanged();
        DataService.SaveTasks();
    }

    private void HandleDragStart()
    {
        TaskDragStateHandler.SetSelectedTask(this);
    }

    private void BadgeChanged(TaskType taskType)
    {
        JobTask.TaskType = taskType;
        UpdateJob();
    }
}