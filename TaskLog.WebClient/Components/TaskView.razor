@inject TaskDragStateHandler TaskDragStateHandler

<div class="border rounded m-2 px-1" style=" width: 16rem;
        background: @JobTask.ProjectJob.DefaultColor;
">

    <!-- Drag, Clock/Hours, Badge -->
    <div class="d-inline-flex al-cnt">
        <!-- Drag -->
        <span class="oi oi-grid-three-up draggable float-left m-2" draggable="true" @ondragstart="@HandleDragStart"></span>

        <!-- Clock/Hours -->
        <div class="input-group input-group-sm mt-1">
            <div class="input-group-prepend">
                <span class="input-group-text">
                    <i class="oi oi-clock"></i>
                </span>
            </div>
            <input type="number" class="form-control hours-input" @bind="Hours" placeholder="2" step="0.5" min="0">
        </div>

        <!-- Badge -->
        <div>
            <button type="button" class="badge badge-@BadgeStyle float-right mx-2 mt-1 task-type-badge" @onclick="RollBadge">@JobTask.TaskType.ToString()</button>
        </div>

    </div>

    <!-- Task Element -->
    <div class="text-truncate">
        <small>
            @JobTask.ProjectJob.ToString()
        </small>
    </div>
</div>

@code {

    //View Model
    [Parameter] public JobTask JobTask { get; set; }

    private void HandleDragStart()
    {
        TaskDragStateHandler.SetSelectedTask(this);
    }

    public double Hours
    {
        get => JobTask.Hours;
        set
        {
            JobTask.Hours = value;
            UpdateState();
        }
    }

    //I need this for 2 reasons:
    //1. To call if from outside (sideNav after updating the job)
    //2. To tell the parent to save; (this could be done by Cascading);
    [Parameter] public Action OnDataChanged { get; set; }
    public void UpdateState()
    {
        StateHasChanged();
        OnDataChanged.Invoke();
    }

    //TODO: Refactor out
    private string BadgeStyle
    {
        get
        {
            if (JobTask.TaskType == TaskType.Error)
                return "danger";
            if (JobTask.TaskType == TaskType.Normal)
                return "light";
            if (JobTask.TaskType == TaskType.Other)
                return "secondary";
            if (JobTask.TaskType == TaskType.Rework)
                return "warning";
            if (JobTask.TaskType == TaskType.Tools)
                return "info";
            return "light";
        }
    }

    //TODO: Refactor out
    public void RollBadge()
    {
        var currentIndex = (int)JobTask.TaskType;
        JobTask.TaskType = (TaskType)(++currentIndex % 5);
        UpdateState();
    }

}