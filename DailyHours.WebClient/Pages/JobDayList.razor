<style>
    .job-status {
        display: flex;
        flex-direction: column;
        width: 312px;
    }

    .dropzone {
        padding: 30px;
        border: 1px dashed #75868a;
        list-style: none;
    }

    .no-drop {
        border: 2px dashed red;
    }

    .can-drop {
        border: 2px dashed green;
    }
</style>

<div class="job-status">
    <h3>@ShortDateString (@Jobs.Count())</h3>

    <ul class="dropzone @dropClass"
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave">

        @foreach (var job in Jobs)
        {
            <JobTask ProjectTask="job" />
        }

    </ul>
</div>

@code {
    [CascadingParameter] JobContainer Container { get; set; }
    [Parameter] public string ShortDateString { get; set; }
    //[Parameter] public JobStatuses[] AllowedStatuses { get; set; }

    List<ProjectTask> Jobs = new List<ProjectTask>();
    string dropClass = "";

    protected override void OnParametersSet()
    {
        Jobs.Clear();
        Jobs.AddRange(Container.Jobs.Where(x => x.DateTime.ToShortDateString() == ShortDateString));
    }

    private void HandleDragEnter()
    {
        if (ShortDateString == Container.Payload.DateTime.ToShortDateString()) return;

        //if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status))
        //{
        //    dropClass = "no-drop";
        //}
        //else
        //{
        dropClass = "can-drop";
        //}
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";

        //if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status)) return;

        await Container.UpdateJobAsync(ShortDateString);
    }
}
